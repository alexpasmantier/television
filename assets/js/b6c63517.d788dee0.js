"use strict";(self.webpackChunktelevision_website=self.webpackChunktelevision_website||[]).push([[4816],{1403:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/distrobox-list-006ccbb805576c4909708b70bb240f55.png"},2773:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(6672);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},3239:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Users/community-channels-unix","title":"Community Channels (unix)","description":"alias","source":"@site/../docs/01-Users/10-community-channels-unix.md","sourceDirName":"01-Users","slug":"/Users/community-channels-unix","permalink":"/television/docs/Users/community-channels-unix","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"docSidebar","previous":{"title":"CLI Reference","permalink":"/television/docs/Users/cli"},"next":{"title":"Community Channels (windows)","permalink":"/television/docs/Users/community-channels-windows"}}');var t=s(3420),r=s(2773);const l={},c="Community Channels (unix)",d={},o=[{value:"<em>alias</em>",id:"alias",level:3},{value:"<em>aws-buckets</em>",id:"aws-buckets",level:3},{value:"<em>aws-instances</em>",id:"aws-instances",level:3},{value:"<em>bash-history</em>",id:"bash-history",level:3},{value:"<em>dirs</em>",id:"dirs",level:3},{value:"<em>distrobox-list</em>",id:"distrobox-list",level:3},{value:"<em>docker-images</em>",id:"docker-images",level:3},{value:"<em>dotfiles</em>",id:"dotfiles",level:3},{value:"<em>env</em>",id:"env",level:3},{value:"<em>files</em>",id:"files",level:3},{value:"<em>fish-history</em>",id:"fish-history",level:3},{value:"<em>git-branch</em>",id:"git-branch",level:3},{value:"<em>git-diff</em>",id:"git-diff",level:3},{value:"<em>git-log</em>",id:"git-log",level:3},{value:"<em>git-reflog</em>",id:"git-reflog",level:3},{value:"<em>git-repos</em>",id:"git-repos",level:3},{value:"<em>guix</em>",id:"guix",level:3},{value:"<em>just-recipes</em>",id:"just-recipes",level:3},{value:"<em>k8s-deployments</em>",id:"k8s-deployments",level:3},{value:"<em>k8s-pods</em>",id:"k8s-pods",level:3},{value:"<em>k8s-services</em>",id:"k8s-services",level:3},{value:"<em>man-pages</em>",id:"man-pages",level:3},{value:"<em>nu-history</em>",id:"nu-history",level:3},{value:"<em>procs</em>",id:"procs",level:3},{value:"<em>text</em>",id:"text",level:3},{value:"<em>tldr</em>",id:"tldr",level:3},{value:"<em>zsh-history</em>",id:"zsh-history",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"community-channels-unix",children:"Community Channels (unix)"})}),"\n",(0,t.jsx)(n.h3,{id:"alias",children:(0,t.jsx)(n.em,{children:"alias"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from shell aliases"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.em,{children:"None"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"alias.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "alias"\ndescription = "A channel to select from shell aliases"\n\n[source]\ncommand = "alias"\ninteractive = true\noutput = "{split:=:0}"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"aws-buckets",children:(0,t.jsx)(n.em,{children:"aws-buckets"})}),"\n",(0,t.jsx)(n.p,{children:"List and preview AWS S3 Buckets"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the aws-buckets channel",src:s(9349).A+"",width:"3172",height:"1732"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"aws"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"aws-buckets.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "aws-buckets"\ndescription = "List and preview AWS S3 Buckets"\nrequirements = [ "aws",]\n\n[source]\ncommand = "aws s3 ls --output text"\noutput = "{split: :3|trim}"\n\n[preview]\ncommand = "aws s3 ls s3://{split: :3|trim} --human-readable --summarize"\n\n[ui.preview_panel]\nsize = 60\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"aws-instances",children:(0,t.jsx)(n.em,{children:"aws-instances"})}),"\n",(0,t.jsx)(n.p,{children:"List and preview AWS EC2 Instances"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"aws"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"aws-instances.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "aws-instances"\ndescription = "List and preview AWS EC2 Instances"\nrequirements = [ "aws",]\n\n[source]\ncommand = "aws ec2 describe-instances --output text --query \\"Reservations[*].Instances[*].[InstanceId,Tags[?Key==\'Name\']|[0].Value]\\""\n\n[preview]\ncommand = "aws ec2 describe-instances --output json --instance-ids {split:\\t:0} --query \'Reservations[*].Instances[0]\'"\n\n[ui.preview_panel]\nsize = 60\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"bash-history",children:(0,t.jsx)(n.em,{children:"bash-history"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from your bash history"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"bash"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"bash-history.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "bash-history"\ndescription = "A channel to select from your bash history"\nrequirements = [ "bash",]\n\n[source]\ncommand = "sed \'1!G;h;$!d\' ${HISTFILE:-${HOME}/.bash_history}"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"dirs",children:(0,t.jsx)(n.em,{children:"dirs"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from directories"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"fd"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"dirs.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "dirs"\ndescription = "A channel to select from directories"\nrequirements = [ "fd",]\n\n[source]\ncommand = [ "fd -t d", "fd -t d --hidden",]\n\n[preview]\ncommand = "ls -la --color=always \'{}\'"\n\n[keybindings]\nshortcut = "f2"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"distrobox-list",children:(0,t.jsx)(n.em,{children:"distrobox-list"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select a container from distrobox"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the distrobox-list channel",src:s(1403).A+"",width:"1821",height:"583"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"distrobox"}),", ",(0,t.jsx)(n.code,{children:"bat"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"distrobox-list.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "distrobox-list"\ndescription = "A channel to select a container from distrobox"\nrequirements = [ "distrobox", "bat",]\n\n[source]\ncommand = [ "distrobox list | awk -F \'|\' \'{ gsub(/ /, \\"\\", $2); print $2}\' | tail --lines=+2",]\n\n[preview]\ncommand = "(distrobox list | column -t -s \'|\' | awk -v selected_name={} \'NR==1 || $0 ~ selected_name\') && echo && distrobox enter -d {} | bat --plain --color=always -lbash"\n\n[keybindings]\nctrl-e = "actions:distrobox-enter"\nctrl-l = "actions:distrobox-list"\nctrl-r = "actions:distrobox-rm"\nctrl-s = "actions:distrobox-stop"\nctrl-u = "actions:distrobox-upgrade"\n\n[actions.distrobox-enter]\ndescription = "Enter a distrobox"\ncommand = "distrobox enter {}"\nmode = "execute"\n\n[actions.distrobox-list]\ndescription = "List a distrobox"\ncommand = "distrobox list | column -t -s \'|\' | awk -v selected_name={} \'NR==1 || $0 ~ selected_name\'"\nmode = "execute"\n\n[actions.distrobox-rm]\ndescription = "Remove a distrobox"\ncommand = "distrobox rm {}"\nmode = "execute"\n\n[actions.distrobox-stop]\ndescription = "Stop a distrobox"\ncommand = "distrobox stop {}"\nmode = "execute"\n\n[actions.distrobox-upgrade]\ndescription = "Upgrade a distrobox"\ncommand = "distrobox upgrade {}"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"docker-images",children:(0,t.jsx)(n.em,{children:"docker-images"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from Docker images"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"docker"}),", ",(0,t.jsx)(n.code,{children:"jq"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"docker-images.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "docker-images"\ndescription = "A channel to select from Docker images"\nrequirements = [ "docker", "jq",]\n\n[source]\ncommand = "docker images --format \'{{.Repository}}:{{.Tag}} {{.ID}}\'"\noutput = "{split: :-1}"\n\n[preview]\ncommand = "docker image inspect \'{split: :-1}\' | jq -C"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"dotfiles",children:(0,t.jsx)(n.em,{children:"dotfiles"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from your user's dotfiles"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"fd"}),", ",(0,t.jsx)(n.code,{children:"bat"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"dotfiles.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "dotfiles"\ndescription = "A channel to select from your user\'s dotfiles"\nrequirements = [ "fd", "bat",]\n\n[source]\ncommand = "fd -t f . $HOME/.config"\n\n[preview]\ncommand = "bat -n --color=always \'{}\'"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"env",children:(0,t.jsx)(n.em,{children:"env"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from environment variables"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.em,{children:"None"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"env.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "env"\ndescription = "A channel to select from environment variables"\n\n[source]\ncommand = "printenv"\noutput = "{split:=:1..}"\n\n[preview]\ncommand = "echo \'{split:=:1..}\'"\n\n[ui]\nlayout = "portrait"\n\n[keybindings]\nshortcut = "f3"\n\n[ui.preview_panel]\nsize = 20\nheader = "{split:=:0}"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"files",children:(0,t.jsx)(n.em,{children:"files"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select files and directories"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"fd"}),", ",(0,t.jsx)(n.code,{children:"bat"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"files.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "files"\ndescription = "A channel to select files and directories"\nrequirements = [ "fd", "bat",]\n\n[source]\ncommand = [ "fd -t f", "fd -t f -H",]\n\n[preview]\ncommand = "bat -n --color=always \'{}\'"\n\n[keybindings]\nshortcut = "f1"\nf12 = "actions:edit"\n\n[preview.env]\nBAT_THEME = "ansi"\n\n[actions.edit]\ndescription = "Opens the selected entries with the default editor (falls back to vim)"\ncommand = "${EDITOR:-vim} \'{}\'"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"fish-history",children:(0,t.jsx)(n.em,{children:"fish-history"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from your fish history"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"fish"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"fish-history.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "fish-history"\ndescription = "A channel to select from your fish history"\nrequirements = [ "fish",]\n\n[source]\ncommand = "fish -c \'history\'"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"git-branch",children:(0,t.jsx)(n.em,{children:"git-branch"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from git branches"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"git"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"git-branch.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "git-branch"\ndescription = "A channel to select from git branches"\nrequirements = [ "git",]\n\n[source]\ncommand = "git --no-pager branch --all --format=\\"%(refname:short)\\""\noutput = "{split: :0}"\n\n[preview]\ncommand = "git show -p --stat --pretty=fuller --color=always \'{0}\'"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"git-diff",children:(0,t.jsx)(n.em,{children:"git-diff"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select files from git diff commands"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"git"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"git-diff.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "git-diff"\ndescription = "A channel to select files from git diff commands"\nrequirements = [ "git",]\n\n[source]\ncommand = "git diff --name-only HEAD"\n\n[preview]\ncommand = "git diff HEAD --color=always -- \'{}\'"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"git-log",children:(0,t.jsx)(n.em,{children:"git-log"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from git log entries"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"git"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"git-log.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "git-log"\ndescription = "A channel to select from git log entries"\nrequirements = [ "git",]\n\n[source]\ncommand = "git log --graph --pretty=format:\'%C(yellow)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\' --abbrev-commit --color=always"\noutput = "{strip_ansi|split: :1}"\nansi = true\n\n[preview]\ncommand = "git show -p --stat --pretty=fuller --color=always \'{strip_ansi|split: :1}\' | head -n 1000"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"git-reflog",children:(0,t.jsx)(n.em,{children:"git-reflog"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from git reflog entries"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"git"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"git-reflog.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "git-reflog"\ndescription = "A channel to select from git reflog entries"\nrequirements = [ "git",]\n\n[source]\ncommand = "git reflog --decorate --color=always"\noutput = "{0|strip_ansi}"\nansi = true\n\n[preview]\ncommand = "git show -p --stat --pretty=fuller --color=always \'{0|strip_ansi}\'"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"git-repos",children:(0,t.jsx)(n.em,{children:"git-repos"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from git repositories on your local machine."}),"\n",(0,t.jsxs)(n.p,{children:["This channel uses ",(0,t.jsx)(n.code,{children:"fd"})," to find directories that contain a ",(0,t.jsx)(n.code,{children:".git"})," subdirectory, and then allows you to preview the git log of the selected repository."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"fd"}),", ",(0,t.jsx)(n.code,{children:"git"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"git-repos.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "git-repos"\nrequirements = [ "fd", "git",]\ndescription = "A channel to select from git repositories on your local machine.\\n\\nThis channel uses `fd` to find directories that contain a `.git` subdirectory, and then allows you to preview the git log of the selected repository.\\n"\n\n[source]\ncommand = "fd -g .git -HL -t d -d 10 --prune ~ -E \'Library\' -E \'Application Support\' --exec dirname \'{}\'"\ndisplay = "{split:/:-1}"\n\n[preview]\ncommand = "cd \'{}\'; git log -n 200 --pretty=medium --all --graph --color"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"guix",children:(0,t.jsx)(n.em,{children:"guix"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to search for and select Guix packages"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the guix channel",src:s(3341).A+"",width:"1920",height:"1080"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"guix"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"guix.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "guix"\ndescription = "A channel to search for and select Guix packages"\nrequirements = [ "guix",]\n\n[source]\ncommand = [ "guix package --list-available=.*",]\ndisplay = "{trim|replace:s/\\\\s+/ /g|split: :0}"\noutput = "{trim|replace:s/\\\\s+/ /g|split: :0}"\n\n[preview]\ncommand = "guix package --show={trim|replace:s/\\\\s+/ /g|split: :0}"\n\n[keybindings]\nf12 = "actions:shell"\n\n[actions.shell]\ndescription = "Spawns a shell with the selected package"\ncommand = "guix shell {trim|replace:s/\\\\s+/ /g|split: :0}"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"just-recipes",children:(0,t.jsx)(n.em,{children:"just-recipes"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select recipes from Justfiles"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the just-recipes channel",src:s(3886).A+"",width:"1817",height:"921"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"just"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"just-recipes.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "just-recipes"\ndescription = "A channel to select recipes from Justfiles"\nrequirements = [ "just",]\n\n[source]\ncommand = [ "just --summary | tr \'[:blank:]\' \'\\n\'",]\n\n[preview]\ncommand = "just -s {}"\n\n[keybindings]\nctrl-x = "actions:execute-recipe"\n\n[actions.execute-recipe]\ndescription = "Execute a justfile recipe"\ncommand = "just {}"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"k8s-deployments",children:(0,t.jsx)(n.em,{children:"k8s-deployments"})}),"\n",(0,t.jsx)(n.p,{children:"List and preview Deployments in a Kubernetes Cluster."}),"\n",(0,t.jsx)(n.p,{children:"The first source lists only from the current namespace, while the second lists from all."}),"\n",(0,t.jsx)(n.p,{children:"Keybindings"}),"\n",(0,t.jsxs)(n.p,{children:["Press ",(0,t.jsx)(n.code,{children:"ctrl-d"})," to delete the selected Deployment."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the k8s-deployments channel",src:s(7947).A+"",width:"3030",height:"1622"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"kubectl"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"k8s-deployments.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "k8s-deployments"\ndescription = "List and preview Deployments in a Kubernetes Cluster.\\n\\nThe first source lists only from the current namespace, while the second lists from all.\\n\\nKeybindings\\n\\nPress `ctrl-d` to delete the selected Deployment.\\n"\nrequirements = [ "kubectl",]\n\n[source]\ncommand = [ "  kubectl get deployments -o go-template --template \'{{range .items}}{{.metadata.namespace}} {{.metadata.name}}{{\\"\\\\n\\"}}{{end}}\'\\n  ", "  kubectl get deployments -o go-template --template \'{{range .items}}{{.metadata.namespace}} {{.metadata.name}}{{\\"\\\\n\\"}}{{end}}\' --all-namespaces\\n  ",]\noutput = "{1}"\n\n[preview]\ncommand = "kubectl describe -n {0} deployments/{1}"\n\n[keybindings]\nctrl-d = "actions:delete"\n\n[ui.preview_panel]\nsize = 60\n\n[actions.delete]\ndescription = "Delete the selected Deployment"\ncommand = "kubectl delete -n {0} deployments/{1}"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"k8s-pods",children:(0,t.jsx)(n.em,{children:"k8s-pods"})}),"\n",(0,t.jsx)(n.p,{children:"List and preview Pods in a Kubernetes Cluster."}),"\n",(0,t.jsx)(n.p,{children:"The first source lists only from the current namespace, while the second lists from all."}),"\n",(0,t.jsx)(n.p,{children:"Keybindings"}),"\n",(0,t.jsxs)(n.p,{children:["Press ",(0,t.jsx)(n.code,{children:"ctrl-e"})," to execute shell inside the selected Pod.\nPress ",(0,t.jsx)(n.code,{children:"ctrl-d"})," to delete the selected Pod.\nPress ",(0,t.jsx)(n.code,{children:"ctrl-l"})," to print and follow the logs of the selected Pod."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the k8s-pods channel",src:s(9799).A+"",width:"3030",height:"1624"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"kubectl"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"k8s-pods.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "k8s-pods"\ndescription = "List and preview Pods in a Kubernetes Cluster.\\n\\nThe first source lists only from the current namespace, while the second lists from all.\\n\\nKeybindings\\n\\nPress `ctrl-e` to execute shell inside the selected Pod.\\nPress `ctrl-d` to delete the selected Pod.\\nPress `ctrl-l` to print and follow the logs of the selected Pod.\\n"\nrequirements = [ "kubectl",]\n\n[source]\ncommand = [ "  kubectl get pods -o go-template --template \'{{range .items}}{{.metadata.namespace}} {{.metadata.name}}{{\\"\\\\n\\"}}{{end}}\'\\n  ", "  kubectl get pods -o go-template --template \'{{range .items}}{{.metadata.namespace}} {{.metadata.name}}{{\\"\\\\n\\"}}{{end}}\' --all-namespaces\\n  ",]\noutput = "{1}"\n\n[preview]\ncommand = "kubectl describe -n {0} pods/{1}"\n\n[keybindings]\nctrl-d = "actions:delete"\nctrl-e = "actions:exec"\nctrl-l = "actions:logs"\n\n[ui.preview_panel]\nsize = 60\n\n[actions.exec]\ndescription = "Execute shell inside the selected Pod"\ncommand = "kubectl exec -i -t -n {0} pods/{1} -- /bin/sh"\nmode = "execute"\n\n[actions.delete]\ndescription = "Delete the selected Pod"\ncommand = "kubectl delete -n {0} pods/{1}"\nmode = "execute"\n\n[actions.logs]\ndescription = "Follow logs of the selected Pod"\ncommand = "kubectl logs -f -n {0} pods/{1}"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"k8s-services",children:(0,t.jsx)(n.em,{children:"k8s-services"})}),"\n",(0,t.jsx)(n.p,{children:"List and preview Services in a Kubernetes Cluster."}),"\n",(0,t.jsx)(n.p,{children:"The first source lists only from the current namespace, while the second lists from all."}),"\n",(0,t.jsx)(n.p,{children:"keybindings"}),"\n",(0,t.jsxs)(n.p,{children:["Press ",(0,t.jsx)(n.code,{children:"ctrl-d"})," to delete the selected Service."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the k8s-services channel",src:s(8159).A+"",width:"3032",height:"1620"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"kubectl"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"k8s-services.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "k8s-services"\ndescription = "List and preview Services in a Kubernetes Cluster.\\n\\nThe first source lists only from the current namespace, while the second lists from all.\\n\\nkeybindings\\n\\nPress `ctrl-d` to delete the selected Service.\\n"\nrequirements = [ "kubectl",]\n\n[source]\ncommand = [ "  kubectl get services -o go-template --template \'{{range .items}}{{.metadata.namespace}} {{.metadata.name}}{{\\"\\\\n\\"}}{{end}}\'\\n  ", "  kubectl get services -o go-template --template \'{{range .items}}{{.metadata.namespace}} {{.metadata.name}}{{\\"\\\\n\\"}}{{end}}\' --all-namespaces\\n  ",]\noutput = "{1}"\n\n[preview]\ncommand = "kubectl describe -n {0} services/{1}"\n\n[keybindings]\nctrl-d = "actions:delete"\n\n[ui.preview_panel]\nsize = 60\n\n[actions.delete]\ndescription = "Delete the selected Service"\ncommand = "kubectl delete -n {0} services/{1}"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"man-pages",children:(0,t.jsx)(n.em,{children:"man-pages"})}),"\n",(0,t.jsx)(n.p,{children:"Browse and preview system manual pages"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the man-pages channel",src:s(5939).A+"",width:"2840",height:"1548"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"apropos"}),", ",(0,t.jsx)(n.code,{children:"man"}),", ",(0,t.jsx)(n.code,{children:"col"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"man-pages.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "man-pages"\ndescription = "Browse and preview system manual pages"\nrequirements = [ "apropos", "man", "col",]\n\n[source]\ncommand = "apropos ."\n\n[preview]\ncommand = "man \'{0}\' | col -bx"\n\n[keybindings]\nenter = "actions:open"\n\n[preview.env]\nMANWIDTH = "80"\n\n[actions.open]\ndescription = "Open the selected man page in the system pager"\ncommand = "man \'{0}\'"\nmode = "execute"\n\n[ui.preview_panel]\nheader = "{0}"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"nu-history",children:(0,t.jsx)(n.em,{children:"nu-history"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from your nu history"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.em,{children:"None"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"nu-history.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "nu-history"\ndescription = "A channel to select from your nu history"\n\n[source]\ncommand = "nu -c \'open $nu.history-path | lines | uniq | reverse | to text\'"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"procs",children:(0,t.jsx)(n.em,{children:"procs"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to find and manage running processes"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"ps"}),", ",(0,t.jsx)(n.code,{children:"awk"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"procs.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "procs"\ndescription = "A channel to find and manage running processes"\nrequirements = [ "ps", "awk",]\n\n[source]\ncommand = "ps -e -o pid=,ucomm= | awk \'{print $1, $2}\'"\ndisplay = "{split: :1}"\noutput = "{split: :0}"\n\n[preview]\ncommand = "ps -p \'{split: :0}\' -o user,pid,ppid,state,%cpu,%mem,command | fold"\n\n[keybindings]\nctrl-k = "actions:kill"\n\n[actions.kill]\ndescription = "Kill the selected process (SIGKILL)"\ncommand = "kill -9 {split: :0}"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"text",children:(0,t.jsx)(n.em,{children:"text"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to find and select text from files"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"rg"}),", ",(0,t.jsx)(n.code,{children:"bat"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"text.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "text"\ndescription = "A channel to find and select text from files"\nrequirements = [ "rg", "bat",]\n\n[source]\ncommand = "rg . --no-heading --line-number --colors \'match:fg:white\' --colors \'path:fg:blue\' --color=always"\nansi = true\noutput = "{strip_ansi|split:\\\\::..2}"\n\n[preview]\ncommand = "bat -n --color=always \'{strip_ansi|split:\\\\::0}\'"\noffset = "{strip_ansi|split:\\\\::1}"\n\n[preview.env]\nBAT_THEME = "ansi"\n\n[ui.preview_panel]\nheader = "{strip_ansi|split:\\\\::..2}"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"tldr",children:(0,t.jsx)(n.em,{children:"tldr"})}),"\n",(0,t.jsx)(n.p,{children:"Browse and preview TLDR help pages for command-line tools"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"tv running the tldr channel",src:s(5132).A+"",width:"1915",height:"1076"}),"\n",(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"tldr"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"tldr.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "tldr"\ndescription = "Browse and preview TLDR help pages for command-line tools"\nrequirements = [ "tldr",]\n\n[source]\ncommand = "tldr --list"\n\n[preview]\ncommand = "tldr \'{0}\'"\n\n[keybindings]\nctrl-e = "actions:open"\n\n[actions.open]\ndescription = "Open the selected TLDR page"\ncommand = "tldr \'{0}\'"\nmode = "execute"\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"zsh-history",children:(0,t.jsx)(n.em,{children:"zsh-history"})}),"\n",(0,t.jsx)(n.p,{children:"A channel to select from your zsh history"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements:"})," ",(0,t.jsx)(n.code,{children:"zsh"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.em,{children:"zsh-history.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[metadata]\nname = "zsh-history"\ndescription = "A channel to select from your zsh history"\nrequirements = [ "zsh",]\n\n[source]\ncommand = "sed \'1!G;h;$!d\' ${HISTFILE:-${HOME}/.zsh_history}"\ndisplay = "{split:;:1..}"\noutput = "{split:;:1..}"\n\n'})}),"\n",(0,t.jsx)(n.hr,{})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},3341:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/guix-6f0028690798f29d306ce64f79b0cc31.png"},3886:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/just-recipes-da829b9e96785197a4df278f6b72215d.png"},5132:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/tldr-afd45da389eae5a0b14cbfe244455152.png"},5939:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/man-pages-3ea5a5d571439ee41548ac3b364ae73a.png"},7947:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/k8s-deployments-9b0fcb4dc1a50ea931d42021f2f6ab0d.png"},8159:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/k8s-services-174f6139f3b0d8e2c961ea34f891316e.png"},9349:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/aws-buckets-464ea28d35844f77c91a6c085dbcf446.png"},9799:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/k8s-pods-d5526b5832dbe4a2a649924b9a63679d.png"}}]);
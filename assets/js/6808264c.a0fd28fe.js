"use strict";(self.webpackChunktelevision_website=self.webpackChunktelevision_website||[]).push([[5874],{8526:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Users/installation","title":"Installation","description":"Nix","source":"@site/../docs/01-Users/01-installation.md","sourceDirName":"01-Users","slug":"/Users/installation","permalink":"/television/docs/Users/installation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"docSidebar","next":{"title":"Quickstart","permalink":"/television/docs/Users/quickstart"}}');var l=s(3420),a=s(5404);const r={},t="Installation",o={},c=[{value:"Nix",id:"nix",level:2},{value:"Homebrew",id:"homebrew",level:2},{value:"Scoop",id:"scoop",level:2},{value:"WinGet",id:"winget",level:2},{value:"Arch Linux",id:"arch-linux",level:2},{value:"Chimera Linux",id:"chimera-linux",level:2},{value:"Debian-based (Debian, Ubuntu, Pop!_OS, Linux Mint, etc.)",id:"debian-based-debian-ubuntu-pop_os-linux-mint-etc",level:2},{value:"Conda-forge (cross-platform)",id:"conda-forge-cross-platform",level:2},{value:"Pre-compiled Binary",id:"pre-compiled-binary",level:2},{value:"Crates.io",id:"cratesio",level:2},{value:"Building from source",id:"building-from-source",level:2},{value:"Repology",id:"repology",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"installation",children:"Installation"})}),"\n",(0,l.jsx)(n.h2,{id:"nix",children:"Nix"}),"\n",(0,l.jsxs)(n.p,{children:["Television is ",(0,l.jsxs)(n.a,{href:"https://github.com/NixOS/nixpkgs/blob/master/pkgs/by-name/te/television/package.nix",children:["available on ",(0,l.jsx)(n.code,{children:"nixpkgs"})]})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"nix run nixpkgs#television\n"})}),"\n",(0,l.jsx)(n.h2,{id:"homebrew",children:"Homebrew"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"brew install television\n"})}),"\n",(0,l.jsx)(n.h2,{id:"scoop",children:"Scoop"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"scoop bucket add extras\nscoop install television\n"})}),"\n",(0,l.jsx)(n.h2,{id:"winget",children:"WinGet"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-pwsh",children:"winget install --exact --id alexpasmantier.television\n"})}),"\n",(0,l.jsx)(n.h2,{id:"arch-linux",children:"Arch Linux"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pacman -S television\n"})}),"\n",(0,l.jsx)(n.h2,{id:"chimera-linux",children:"Chimera Linux"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"apk add chimera-repo-user\napk add television\n"})}),"\n",(0,l.jsx)(n.h2,{id:"debian-based-debian-ubuntu-pop_os-linux-mint-etc",children:"Debian-based (Debian, Ubuntu, Pop!_OS, Linux Mint, etc.)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'VER=`curl -s "https://api.github.com/repos/alexpasmantier/television/releases/latest" | grep \'"tag_name":\' | sed -E \'s/.*"tag_name": "([^"]+)".*/\\1/\'`\ncurl -LO https://github.com/alexpasmantier/television/releases/download/$VER/tv-$VER-x86_64-unknown-linux-musl.deb\necho $VER\nsudo dpkg -i tv-$VER-x86_64-unknown-linux-musl.deb\n'})}),"\n",(0,l.jsx)(n.h2,{id:"conda-forge-cross-platform",children:"Conda-forge (cross-platform)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pixi global install television\n"})}),"\n",(0,l.jsx)(n.h2,{id:"pre-compiled-binary",children:"Pre-compiled Binary"}),"\n",(0,l.jsxs)(n.p,{children:["From the ",(0,l.jsx)(n.a,{href:"https://github.com/alexpasmantier/television/releases/latest",children:"latest release"})," page:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Download the latest release asset for your platform (e.g. ",(0,l.jsx)(n.code,{children:"tv-vX.X.X-linux-x86_64.tar.gz"})," if you're on a linux x86 machine)"]}),"\n",(0,l.jsxs)(n.li,{children:["Unpack and copy to the relevant location on your system (e.g. ",(0,l.jsx)(n.code,{children:"/usr/local/bin"})," on macos and linux for a global installation)"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"cratesio",children:"Crates.io"}),"\n",(0,l.jsx)(n.p,{children:"Setup the latest stable Rust toolchain via rustup:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nrustup update\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Install ",(0,l.jsx)(n.code,{children:"television"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cargo install --locked television\n"})}),"\n",(0,l.jsx)(n.h2,{id:"building-from-source",children:"Building from source"}),"\n",(0,l.jsx)(n.p,{children:"If you want to benefit from the latest updates on main, clone the repo and build from source by running:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"git clone git@github.com:alexpasmantier/television.git && cd television\njust build release\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You can then alias ",(0,l.jsx)(n.code,{children:"tv"})," to the produced binary:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"alias tv=$TELEVISION_DIR/target/release/tv\n"})}),"\n",(0,l.jsx)(n.h2,{id:"repology",children:"Repology"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://repology.org/project/television/versions",children:(0,l.jsx)(n.img,{src:"https://repology.org/badge/vertical-allrepos/television.svg",alt:"Packaging status"})})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);